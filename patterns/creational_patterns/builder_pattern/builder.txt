Builder is a creational design pattern that lets you construct complex objects step by step.
The pattern allows you to produce different types and representations of an object using the
same construction code.

The Builder pattern suggests that you extract the object construction code out of its own class
and move it to separate objects called builders. You can go further and extract a series of calls
to the builder steps you use to construct a product into a separate class called director.
The director class defines the order in which to execute the building steps, while the builder
provides the implementation for those steps.

example inspired by: https://refactoring.guru/design-patterns/builder/ruby/example
